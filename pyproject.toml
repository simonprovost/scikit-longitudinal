[project]
name = "Scikit-longitudinal"
version="0.0.6"
description = "Scikit-longitudinal, an open-source Python lib for longitudinal data analysis, builds on Scikit-learn's foundation. It offers specialised tools to tackle challenges of repeated measures data, ideal for (med.) researchers, data scientists, & analysts."
authors = [
    {name = "Provost Simon", email = "simon.gilbert.provost@gmail.com"},
    {name = "Alex Freitas", email = "a.a.freitas@kent.ac.uk"},
]

dependencies = [
    "scipy>=1.5.0",
    "pandas<2.0.0,>=1.5.3",
    "matplotlib<4.0.0,>=3.7.0",
    "jupyter<2.0.0,>=1.0.0",
    "overrides<8.0.0,>=7.3.1",
    "ray<3.0.0,>=2.3.1",
    "statsmodels<1.0.0,>=0.14.0",
    "numpy==1.23.3",
    "graphviz<1.0.0,>=0.20.1",
    "liac-arff>=2.2.2",
    "threadpoolctl<4.0.0,>=3.1.0",
    "stopit>=1.1.2",
    "rich>=13.6.0",
    "joblib>=0.11",
    "deep-forest>=0.1.7",
    "scikit-lexicographical-trees==0.0.4",
]
requires-python = ">=3.9,<3.10"
readme = "README.md"

[project.urls]
Homepage = "https://github.com/simonprovost/scikit-longitudinal"
Documentation = "https://simonprovost.github.io/scikit-longitudinal/"
Source = "https://github.com/simonprovost/scikit-longitudinal/tree/main/scikit_longitudinal"
Tracker = "https://github.com/simonprovost/scikit-longitudinal/issues/"

[tool.pdm.resolution]
respect-source-order = true
excludes = ["scikit-learn"]

[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
lint = [
    "autoflake<3.0.0,>=2.1.1",
    "flake8-docstrings>=1.7.0",
    "pydocstyle>=6.3.0",
    "flake8>=6.0.0",
    "pylint>=2.17.1",
    "isort>=5.12.0",
    "black>=23.10.1",
    "autopep8>=2.0.2",
    "docformatter[tomli]<2.0.0,>=1.6.4",
]
test = [
    "pytest>=4.4.0",
    "pytest-cov>=4.0.0",
    "genbadge>=1.1.0"
]
doc = [
    "mkdocs==1.6.0",
    "mkdocs-get-deps==0.2.0",
    "mkdocs-material==9.5.27",
    "mkdocs-material[imaging]",
    "mkdocs-material-extensions==1.3.1",
    "mkdocs-minify-plugin==0.8.0"
]


[tool.pdm.scripts]
# Project setup (Note: This has only been tested on Linux && OSX)
_set_pdm_use_venv = { cmd = "pdm use --venv ${PDM_IN_ENV}" }
_use_python39.shell = "pdm use \"${SKLONG_PYTHON_PATH}\""
_use_python39.env_file = ".env"
_create_env.shell = "pdm venv create --with-pip ${SKLONG_PYTHON_VERSION}"
_create_env.env_file = ".env"
_check_sklong_vars = {shell = "echo 'Make sure to set the SKLONG_PYTHON_PATH and SKLONG_PYTHON_VERSION environment variables'"}
_set_env_var = {shell = "echo 'could you please run `export PDM_IN_ENV=in-project`'"}
_activate_env = {cmd = "echo 'could you please activate the environment via `eval $(pdm venv activate (dollar-sign)PDM_IN_ENV)`'"}
setup_sklong = {composite = ["_check_sklong_vars", "_create_env", "_set_env_var", "_activate_env"]}
remove_env = { cmd = "pdm venv remove ${PDM_IN_ENV}" }
_clean_project = {cmd = "echo could you please deactivate the environment via `conda deactivate` then run `pdm run remove_env`"}
clean = {composite = ["_check_pdm_vars", "_clean_project"] }
_install_deps = { cmd = "pdm install --venv ${PDM_IN_ENV} --prod", env_file.override = ".env" }
_check_pdm_vars = {call = "scripts.pdm.pdm_pre_install:check_pdm_variables"}
_risky_clean = { shell = "rm -rf pdm.lock __pypackages__" }
install_prod = {composite = ["_check_pdm_vars", "_set_pdm_use_venv", "_install_deps",]}
view_env = {cmd = "pdm venv list"}
build_dist = {cmd = "pdm build"}
update_lock = {cmd = "pdm lock", env_file.override = ".env"}
update_lock_dev = {cmd = "pdm lock -d", env_file.override = ".env"}

# Testing and linting (Note: This has only been tested on Linux && OSX)
_install_dev = { cmd = "pdm install -G lint -G test -G doc", env_file.override = ".env" }
install_dev = {composite = ["_set_pdm_use_venv", "_install_dev"]}

tests = {cmd = "pytest scikit_longitudinal/ --cov=./ --cov-report=html --cov-config=.coveragerc --cov-report=html:htmlcov/scikit_longitudinal -s -vv --capture=no"}
clean_cache = {shell = "rm -rf htmlcov .pytest_cache .*_cache && find . -type d -name '__pycache__' -exec rm -r {} +"}
isort = {cmd = "isort --skip=scikit-learn scikit_longitudinal"}
black = {cmd = "black --line-length 120 --preview --exclude=./scikit-learn/* scikit_longitudinal"}
flake8 = {cmd = "flake8 --exclude=./scikit-learn/* scikit_longitudinal"}
autoflake = {cmd = "autoflake --in-place --remove-all-unused-imports --recursive --exclude=./scikit-learn/* scikit_longitudinal"}
pylint = {cmd = "pylint --rcfile=pylintrc scikit_longitudinal/"}
precommit = {shell = "git ls-files -- 'scikit_longitudinal/*.py' | xargs pre-commit run --files"}
autopep8 = {cmd = "autopep8 --in-place --aggressive --aggressive --max-line-length 120 --recursive --exclude=./scikit-learn/* scikit_longitudinal"}
docformatter = {cmd = "docformatter --in-place --recursive --wrap-summaries 120 --wrap-descriptions 120 --blank --make-summary-multi-line --exclude=./scikit-learn/ scikit_longitudinal"}
lint = {composite = ["flake8", "pylint"]}
format = {composite = ["isort", "autopep8", "black", "autoflake", "docformatter"]}
lint_format_tests = {composite = ["format", "lint", "tests"]}

#Documentation
docs = {shell = "mkdocs serve"}

[tool.flake8]
max-line-length = 120

[tool.black]
line-length = 120
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | scikit-learn
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 120

[tool.yapfignore]
ignore_patterns = [
  "scikit-learn/**/*.py",
]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"